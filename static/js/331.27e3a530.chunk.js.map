{"version":3,"file":"static/js/331.27e3a530.chunk.js","mappings":"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","sources":["pages/ProjectsPages/BuildingsResidential.jsx","config.js","services/api.js"],"sourcesContent":["import { ProjectsPageTemplate } from 'components';\nimport { getPortoflioBuildingsResidential } from '../../services/api';\n\nconst BuildingsResidential = () => {\n  return (\n    <ProjectsPageTemplate\n      pageTitle=\"Budynki mieszkalne\"\n      apiFunction={getPortoflioBuildingsResidential}\n    />\n  );\n};\n\nexport default BuildingsResidential;\n","// config.js\nexport const BASE_URL = 'https://www.2mstudio.org.pl/wordpress/wp-json/wp/v2/';\n\nexport const API_PATHS = {\n  post: 'posts',\n  blog: 'posts?categories=5',\n  portfolioInterior: 'posts?categories=16',\n  portoflioBuildingsResidential: 'posts?categories=17',\n  portoflioBuildingsIndustrial: 'posts?categories=18',\n  portoflioBuildingsCommercial: 'posts?categories=19',\n  media: 'media/',\n  aboutUs: 'pages/112',\n  offer: 'pages/342',\n};\n","import axios from 'axios';\nimport { BASE_URL, API_PATHS } from '../config.js';\n\nimport defaultImage from '../assets/images/photo-home.webp';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// fetch data\nexport const fetchData = async path => {\n  try {\n    const response = await instance.get(`${BASE_URL}${path}`, {\n      headers: {\n        accept: 'application/json',\n      },\n    });\n\n    if (response.status === 200) {\n      return response.data;\n    } else {\n      throw new Error('Network response was not ok');\n    }\n  } catch (error) {\n    console.error('An error occurred while fetching data:', error);\n    throw error;\n  }\n};\n\n// fetch projects with images\nexport const fetchProjectsWithImages = async path => {\n  const projects = await fetchData(path);\n\n  const projectsWithImages = await Promise.all(\n    projects.map(async project => {\n      let simplifiedProject = {\n        id: project.id,\n        img: defaultImage,\n        title: project.title.rendered,\n      };\n\n      if (project.featured_media) {\n        try {\n          const featuredMedia = await fetchImages(project.featured_media);\n          simplifiedProject.img = featuredMedia.source_url || defaultImage;\n        } catch (error) {\n          console.error(\n            'There was a problem fetching images for project:',\n            error\n          );\n        }\n      }\n\n      return simplifiedProject;\n    })\n  );\n\n  return projectsWithImages;\n};\n\n// fetch projects for different categories\nexport const getPortfolioInterior = async () => {\n  const projects = await fetchProjectsWithImages(API_PATHS.portfolioInterior);\n  return projects;\n};\n\nexport const getPortoflioBuildingsResidential = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsResidential\n  );\n  return projects;\n};\n\nexport const getPortoflioBuildingsIndustrial = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsIndustrial\n  );\n  return projects;\n};\n\nexport const getPortoflioBuildingsCommercial = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsCommercial\n  );\n  return projects;\n};\n\n// fetch blog posts\nexport const getBlogPosts = async (page, perPage = 6) => {\n  const apiUrl = `${API_PATHS.blog}&page=${page}&per_page=${perPage}`;\n\n  const response = await instance.get(apiUrl, {\n    headers: {\n      accept: 'application/json',\n    },\n  });\n\n  if (response.status === 200) {\n    const totalPostsHeader = response.headers['x-wp-total'];\n    const posts = response.data;\n    const lastPage = Math.ceil(parseInt(totalPostsHeader) / perPage);\n\n    const postsWithImages = await Promise.all(\n      posts.map(async post => {\n        let simplifiedPost = {\n          id: post.id,\n          img: defaultImage,\n          title: post.title.rendered,\n          date: post.date,\n          excerpt: post.excerpt.rendered,\n        };\n\n        if (post.featured_media) {\n          try {\n            const featuredMedia = await fetchImages(post.featured_media);\n            simplifiedPost.img = featuredMedia.source_url || defaultImage;\n          } catch (error) {\n            console.error(\n              'There was a problem fetching images for posts:',\n              error\n            );\n          }\n        }\n\n        return simplifiedPost;\n      })\n    );\n\n    return { posts: postsWithImages, lastPage };\n  } else {\n    throw new Error('Network response was not ok');\n  }\n};\n\nexport const getPost = async postId => {\n  const post = await fetchData(`${API_PATHS.post}/${postId}`);\n  return post;\n};\n\n// fetch data for a subpage - About Us\nexport const getAboutUsInfo = async () => {\n  const data = await fetchData(API_PATHS.aboutUs);\n  if (data && data.content && data.content.rendered) {\n    return data.content.rendered;\n  } else {\n    throw new Error('There was a problem fetching the data.');\n  }\n};\n\n// fetch data for a subpage - Offer\nexport const getOfferData = async () => {\n  const data = await fetchData(API_PATHS.offer);\n  if (data && data.content && data.content.rendered) {\n    return data.content.rendered;\n  } else {\n    throw new Error('There was a problem fetching the data.');\n  }\n};\n\n// fetch images for projects, blog posts\nexport const fetchImages = async mediaId => {\n  try {\n    const response = await instance.get(`${API_PATHS.media}${mediaId}`);\n\n    if (response.status !== 200) {\n      throw new Error('Network response was not ok');\n    }\n\n    const images = response.data;\n    return images;\n  } catch (error) {\n    console.error('There was a problem fetching the media:', error);\n    throw error;\n  }\n};\n"],"names":["BuildingsResidential","_jsx","ProjectsPageTemplate","pageTitle","apiFunction","getPortoflioBuildingsResidential","BASE_URL","API_PATHS","instance","axios","create","baseURL","headers","fetchData","async","response","get","concat","path","accept","status","data","Error","error","console","fetchProjectsWithImages","projects","Promise","all","map","simplifiedProject","id","project","img","defaultImage","title","rendered","featured_media","featuredMedia","fetchImages","source_url","getPortfolioInterior","getPortoflioBuildingsIndustrial","getPortoflioBuildingsCommercial","getBlogPosts","page","perPage","arguments","length","undefined","apiUrl","totalPostsHeader","posts","lastPage","Math","ceil","parseInt","simplifiedPost","post","date","excerpt","getPost","postId","getAboutUsInfo","content","getOfferData","mediaId"],"sourceRoot":""}