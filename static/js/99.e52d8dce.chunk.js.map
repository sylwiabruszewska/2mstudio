{"version":3,"file":"static/js/99.e52d8dce.chunk.js","mappings":"kMACA,QAA0B,6B,aCS1B,MAgDA,EAhDoBA,KAClB,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,OACZC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,MAejC,OAbAC,EAAAA,EAAAA,YAAU,KACUC,WAChB,IACE,MAAMC,QAAaC,EAAAA,EAAAA,IAAQR,GAC3BG,EAAQI,EACV,CAAE,MAAOE,GACPC,QAAQD,MAAM,uBAAwBA,EACxC,GAGFE,EAAW,GACV,CAACX,KAGFY,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAAAF,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,sCAGTC,EAAAA,EAAAA,KAACE,EAAAA,GAAO,CAAAH,UACNC,EAAAA,EAAAA,KAACG,EAAAA,GAAS,CAAAJ,SACPZ,IACCU,EAAAA,EAAAA,MAACO,EAAAA,GAAa,CAAAL,SAAA,EACZF,EAAAA,EAAAA,MAAA,OAAKQ,UAAWC,EAAkBP,SAAA,EAChCC,EAAAA,EAAAA,KAAA,QAAAD,SACG,IAAIQ,KAAKpB,EAAKqB,MAAMC,mBAAmB,QAAS,CAC/CC,KAAM,UACNC,MAAO,OACPC,IAAK,eAGTZ,EAAAA,EAAAA,KAAA,MAAAD,SAAKZ,EAAK0B,MAAMC,YAChBd,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,OAAAD,UAAMgB,EAAAA,EAAAA,IAAM5B,EAAK6B,QAAQF,gBAE3Bd,EAAAA,EAAAA,KAACiB,EAAAA,GAAQ,aAKhB,C,uGCrDA,MAAMC,EAAW,uDAEXC,EACL,QADKA,EAEL,qBAFKA,EAGQ,sBAHRA,EAIoB,sBAJpBA,EAKmB,sBALnBA,EAMmB,sBANnBA,EAOJ,SAPIA,EAQF,Y,cCNX,MAAMC,EAAWC,EAAAA,EAAMC,OAAO,CAC5BC,QAASL,EACTM,QAAS,CACP,eAAgB,sBAKP5B,EAAYL,UACvB,IACE,MAAMkC,QAAiBL,EAASM,IAAI,GAADC,OAAIT,GAAQS,OAAGC,GAAQ,CACxDJ,QAAS,CACPK,OAAQ,sBAIZ,GAAwB,MAApBJ,EAASK,OACX,OAAOL,EAASjC,KAEhB,MAAM,IAAIuC,MAAM,8BAEpB,CAAE,MAAOrC,GAEP,MADAC,QAAQD,MAAM,yCAA0CA,GAClDA,CACR,GAIWsC,EAA0BzC,UACrC,MAAM0C,QAAiBrC,EAAUgC,GA0BjC,aAxBiCM,QAAQC,IACvCF,EAASG,KAAI7C,UACX,IAAI8C,EAAoB,CACtBC,GAAIC,EAAQD,GACZE,IAAKC,EACL5B,MAAO0B,EAAQ1B,MAAMC,UAGvB,GAAIyB,EAAQG,eACV,IACE,MAAMC,QAAsBC,EAAYL,EAAQG,gBAChDL,EAAkBG,IAAMG,EAAcE,YAAcJ,CACtD,CAAE,MAAO/C,GACPC,QAAQD,MACN,mDACAA,EAEJ,CAGF,OAAO2C,CAAiB,IAIH,EAIdS,EAAuBvD,eACXyC,EAAwBb,GAIpC4B,EAAmCxD,eACvByC,EACrBb,GAKS6B,EAAkCzD,eACtByC,EACrBb,GAKS8B,EAAkC1D,eACtByC,EACrBb,GAMS+B,EAAe3D,eAAO4D,GAAuB,IAAjBC,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACjD,MAAMG,EAAM,GAAA7B,OAAMR,EAAc,UAAAQ,OAASwB,EAAI,cAAAxB,OAAayB,GAEpD3B,QAAiBL,EAASM,IAAI8B,EAAQ,CAC1ChC,QAAS,CACPK,OAAQ,sBAIZ,GAAwB,MAApBJ,EAASK,OAAgB,CAC3B,MAAM2B,EAAmBhC,EAASD,QAAQ,cACpCkC,EAAQjC,EAASjC,KACjBmE,EAAWC,KAAKC,KAAKC,SAASL,GAAoBL,GA4BxD,MAAO,CAAEM,YA1BqBxB,QAAQC,IACpCuB,EAAMtB,KAAI7C,UACR,IAAIwE,EAAiB,CACnBzB,GAAInD,EAAKmD,GACTE,IAAKC,EACL5B,MAAO1B,EAAK0B,MAAMC,SAClBN,KAAMrB,EAAKqB,KACXwD,QAAS7E,EAAK6E,QAAQlD,UAGxB,GAAI3B,EAAKuD,eACP,IACE,MAAMC,QAAsBC,EAAYzD,EAAKuD,gBAC7CqB,EAAevB,IAAMG,EAAcE,YAAcJ,CACnD,CAAE,MAAO/C,GACPC,QAAQD,MACN,iDACAA,EAEJ,CAGF,OAAOqE,CAAc,KAIQJ,WACnC,CACE,MAAM,IAAI5B,MAAM,8BAEpB,EAEatC,EAAUF,eACFK,EAAU,GAAD+B,OAAIR,EAAc,KAAAQ,OAAI1C,IAKvCgF,EAAiB1E,UAC5B,MAAMC,QAAaI,EAAUuB,GAC7B,GAAI3B,GAAQA,EAAKwB,SAAWxB,EAAKwB,QAAQF,SACvC,OAAOtB,EAAKwB,QAAQF,SAEpB,MAAM,IAAIiB,MAAM,2DAClB,EAIWa,EAAcrD,UACzB,IACE,MAAMkC,QAAiBL,EAASM,IAAI,GAADC,OAAIR,GAAeQ,OAAGuC,IAEzD,GAAwB,MAApBzC,EAASK,OACX,MAAM,IAAIC,MAAM,+BAIlB,OADeN,EAASjC,IAE1B,CAAE,MAAOE,GAEP,MADAC,QAAQD,MAAM,0CAA2CA,GACnDA,CACR,E","sources":["webpack://2mstudio/./src/pages/PostDetails/PostDetails.module.scss?e73a","pages/PostDetails/PostDetails.jsx","config.js","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wp-post\":\"PostDetails_wp-post__WnIRd\"};","import { Helmet } from 'react-helmet';\nimport { Section, Container } from 'components';\nimport parse from 'html-react-parser';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getPost } from 'services/api';\nimport styles from './PostDetails.module.scss';\nimport { BackLink, AnimatedRoute } from 'components';\n\nconst PostDetails = () => {\n  const { postId } = useParams();\n  const [post, setPost] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getPost(postId);\n        setPost(data);\n      } catch (error) {\n        console.error('Error fetching post:', error);\n      }\n    };\n\n    fetchData();\n  }, [postId]);\n\n  return (\n    <>\n      <Helmet>\n        <title>2M STUDIO Pracownia Projektowa</title>\n      </Helmet>\n\n      <Section>\n        <Container>\n          {post && (\n            <AnimatedRoute>\n              <div className={styles['wp-post']}>\n                <span>\n                  {new Date(post.date).toLocaleDateString('pl-PL', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                  })}\n                </span>\n                <h2>{post.title.rendered}</h2>\n                <hr />\n                <div>{parse(post.content.rendered)}</div>\n              </div>\n              <BackLink />\n            </AnimatedRoute>\n          )}\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default PostDetails;\n","// config.js\nexport const BASE_URL = 'https://www.2mstudio.org.pl/wordpress/wp-json/wp/v2/';\n\nexport const API_PATHS = {\n  post: 'posts',\n  blog: 'posts?categories=5',\n  portfolioInterior: 'posts?categories=16',\n  portoflioBuildingsResidential: 'posts?categories=17',\n  portoflioBuildingsIndustrial: 'posts?categories=18',\n  portoflioBuildingsCommercial: 'posts?categories=19',\n  media: 'media/',\n  aboutUs: 'pages/112',\n};\n","import axios from 'axios';\nimport { BASE_URL, API_PATHS } from '../config.js';\n\nimport defaultImage from '../assets/images/photo-home.jpg';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// fetch data\nexport const fetchData = async path => {\n  try {\n    const response = await instance.get(`${BASE_URL}${path}`, {\n      headers: {\n        accept: 'application/json',\n      },\n    });\n\n    if (response.status === 200) {\n      return response.data;\n    } else {\n      throw new Error('Network response was not ok');\n    }\n  } catch (error) {\n    console.error('An error occurred while fetching data:', error);\n    throw error;\n  }\n};\n\n// fetch projects with images\nexport const fetchProjectsWithImages = async path => {\n  const projects = await fetchData(path);\n\n  const projectsWithImages = await Promise.all(\n    projects.map(async project => {\n      let simplifiedProject = {\n        id: project.id,\n        img: defaultImage,\n        title: project.title.rendered,\n      };\n\n      if (project.featured_media) {\n        try {\n          const featuredMedia = await fetchImages(project.featured_media);\n          simplifiedProject.img = featuredMedia.source_url || defaultImage;\n        } catch (error) {\n          console.error(\n            'There was a problem fetching images for project:',\n            error\n          );\n        }\n      }\n\n      return simplifiedProject;\n    })\n  );\n\n  return projectsWithImages;\n};\n\n// fetch projects for different categories\nexport const getPortfolioInterior = async () => {\n  const projects = await fetchProjectsWithImages(API_PATHS.portfolioInterior);\n  return projects;\n};\n\nexport const getPortoflioBuildingsResidential = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsResidential\n  );\n  return projects;\n};\n\nexport const getPortoflioBuildingsIndustrial = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsIndustrial\n  );\n  return projects;\n};\n\nexport const getPortoflioBuildingsCommercial = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsCommercial\n  );\n  return projects;\n};\n\n// fetch blog posts\nexport const getBlogPosts = async (page, perPage = 6) => {\n  const apiUrl = `${API_PATHS.blog}&page=${page}&per_page=${perPage}`;\n\n  const response = await instance.get(apiUrl, {\n    headers: {\n      accept: 'application/json',\n    },\n  });\n\n  if (response.status === 200) {\n    const totalPostsHeader = response.headers['x-wp-total'];\n    const posts = response.data;\n    const lastPage = Math.ceil(parseInt(totalPostsHeader) / perPage);\n\n    const postsWithImages = await Promise.all(\n      posts.map(async post => {\n        let simplifiedPost = {\n          id: post.id,\n          img: defaultImage,\n          title: post.title.rendered,\n          date: post.date,\n          excerpt: post.excerpt.rendered,\n        };\n\n        if (post.featured_media) {\n          try {\n            const featuredMedia = await fetchImages(post.featured_media);\n            simplifiedPost.img = featuredMedia.source_url || defaultImage;\n          } catch (error) {\n            console.error(\n              'There was a problem fetching images for posts:',\n              error\n            );\n          }\n        }\n\n        return simplifiedPost;\n      })\n    );\n\n    return { posts: postsWithImages, lastPage };\n  } else {\n    throw new Error('Network response was not ok');\n  }\n};\n\nexport const getPost = async postId => {\n  const post = await fetchData(`${API_PATHS.post}/${postId}`);\n  return post;\n};\n\n// fetch data for a subpage - About Us\nexport const getAboutUsInfo = async () => {\n  const data = await fetchData(API_PATHS.aboutUs);\n  if (data && data.content && data.content.rendered) {\n    return data.content.rendered;\n  } else {\n    throw new Error('Nie można pobrać zawartości strony O nas.');\n  }\n};\n\n// fetch images for projects, blog posts\nexport const fetchImages = async mediaId => {\n  try {\n    const response = await instance.get(`${API_PATHS.media}${mediaId}`);\n\n    if (response.status !== 200) {\n      throw new Error('Network response was not ok');\n    }\n\n    const images = response.data;\n    return images;\n  } catch (error) {\n    console.error('There was a problem fetching the media:', error);\n    throw error;\n  }\n};\n"],"names":["PostDetails","postId","useParams","post","setPost","useState","useEffect","async","data","getPost","error","console","fetchData","_jsxs","_Fragment","children","_jsx","Helmet","Section","Container","AnimatedRoute","className","styles","Date","date","toLocaleDateString","year","month","day","title","rendered","parse","content","BackLink","BASE_URL","API_PATHS","instance","axios","create","baseURL","headers","response","get","concat","path","accept","status","Error","fetchProjectsWithImages","projects","Promise","all","map","simplifiedProject","id","project","img","defaultImage","featured_media","featuredMedia","fetchImages","source_url","getPortfolioInterior","getPortoflioBuildingsResidential","getPortoflioBuildingsIndustrial","getPortoflioBuildingsCommercial","getBlogPosts","page","perPage","arguments","length","undefined","apiUrl","totalPostsHeader","posts","lastPage","Math","ceil","parseInt","simplifiedPost","excerpt","getAboutUsInfo","mediaId"],"sourceRoot":""}