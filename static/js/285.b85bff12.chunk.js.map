{"version":3,"file":"static/js/285.b85bff12.chunk.js","mappings":"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","sources":["helpers/getImages.js","webpack://2mstudio/./src/pages/BlogPage/BlogPage.module.scss?848f","pages/BlogPage/BlogPage.jsx","config.js","services/api.js"],"sourcesContent":["import { fetchImages } from '../services/api';\n\nexport const getImages = async (posts, imgState, setImgState) => {\n  if (!posts) {\n    return;\n  }\n\n  try {\n    for (const post of posts) {\n      if (post.featured_media !== 0 && !imgState[post.featured_media]) {\n        const mediaData = await fetchImages(post.featured_media);\n        setImgState(prevState => ({\n          ...prevState,\n          [post.featured_media]: mediaData.source_url,\n        }));\n      }\n    }\n  } catch (error) {\n    console.error('There was a problem fetching media:', error);\n  }\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"blog-list\":\"BlogPage_blog-list__FhnfV\",\"blog-post\":\"BlogPage_blog-post__4Rp8X\",\"blog-card\":\"BlogPage_blog-card__Yx2Dp\",\"box\":\"BlogPage_box__+pPxV\",\"post-img\":\"BlogPage_post-img__C6DEb\",\"blog-date\":\"BlogPage_blog-date__WTLjp\",\"blog-title\":\"BlogPage_blog-title__k+MSP\",\"blog-excerpt\":\"BlogPage_blog-excerpt__btwjq\",\"overlay\":\"BlogPage_overlay__QkxZR\",\"btn-group\":\"BlogPage_btn-group__0U9TC\",\"btn-pag\":\"BlogPage_btn-pag__4ry92\"};","import { Helmet } from 'react-helmet';\nimport { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport styles from './BlogPage.module.scss';\nimport { Section, Container, Button } from 'components';\nimport { getImages } from '../../helpers/getImages';\nimport { getBlogPosts } from '../../services/api';\nimport { setIsLoading } from '../../redux/global/globalSlice';\n\nconst BlogPage = () => {\n  const [posts, setPosts] = useState();\n  const [featuredImages, setFeaturedImages] = useState({});\n  const [currentPage, setCurrentPage] = useState(1);\n  const [lastPageBlog, setLastPageBlog] = useState(null);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPage]);\n\n  const goToNextPage = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n  };\n\n  const goToPrevPage = () => {\n    setCurrentPage(prevPage => prevPage - 1);\n  };\n\n  const fetchData = async () => {\n    dispatch(setIsLoading(true));\n    try {\n      const { posts, lastPage } = await getBlogPosts(currentPage);\n\n      setPosts(posts);\n\n      if (lastPageBlog === null) {\n        setLastPageBlog(lastPage);\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    } finally {\n      dispatch(setIsLoading(false));\n    }\n  };\n\n  useEffect(() => {\n    getImages(posts, featuredImages, setFeaturedImages, getImages);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [posts]);\n\n  return (\n    <>\n      <Helmet>\n        <title>2m Studio Pracownia Projektowa - Portfolio - Blog</title>\n      </Helmet>\n\n      <Section>\n        <Container>\n          <div className={styles['blog-list']}>\n            {posts &&\n              posts.map(post => (\n                <article key={post.id} className={styles['blog-card']}>\n                  <div className={styles['blog-post']}>\n                    <Link to={`/${post.id}`}>\n                      <p className={styles['blog-date']}>\n                        {new Date(post.date).toLocaleDateString('pl-PL', {\n                          year: 'numeric',\n                          month: 'long',\n                          day: 'numeric',\n                        })}\n                      </p>\n                      <h2 className={styles['blog-title']}>\n                        {post.title.rendered}\n                      </h2>\n                      <p\n                        className=\"blog-excerpt\"\n                        dangerouslySetInnerHTML={{\n                          __html: post.excerpt.rendered,\n                        }}\n                      />\n                    </Link>\n                  </div>\n                  <div className={styles['overlay']}>\n                    <Link to={`/${post.id}`}>\n                      {post.featured_media !== 0 &&\n                        featuredImages[post.featured_media] && (\n                          <div>\n                            <img\n                              src={featuredImages[post.featured_media]}\n                              alt={post.title.rendered}\n                              className={styles['post-img']}\n                            />\n\n                            <div className={styles['box']}>zobacz post</div>\n                          </div>\n                        )}\n                    </Link>\n                  </div>\n                </article>\n              ))}\n          </div>\n          <div className={styles['btn-group']}>\n            <div>\n              {posts && currentPage > 1 && (\n                <Button className={styles['btn-pag']} onClick={goToPrevPage}>\n                  Poprzednia strona\n                </Button>\n              )}\n            </div>\n            <div>\n              {currentPage < lastPageBlog && posts && (\n                <Button className={styles['btn-pag']} onClick={goToNextPage}>\n                  NastÄ™pna strona\n                </Button>\n              )}\n            </div>\n          </div>\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default BlogPage;\n","// config.js\nexport const BASE_URL = 'https://www.2mstudio.org.pl/wordpress/wp-json/wp/v2/';\n\nexport const API_PATHS = {\n  post: 'posts',\n  blog: 'posts?categories=5',\n  portfolioInterior: 'posts?categories=16',\n  portoflioBuildingsResidential: 'posts?categories=17',\n  portoflioBuildingsIndustrial: 'posts?categories=18',\n  portoflioBuildingsCommercial: 'posts?categories=19',\n  media: 'media/',\n  aboutUs: 'pages/112',\n};\n","import axios from 'axios';\nimport { BASE_URL, API_PATHS } from '../config.js';\n\naxios.defaults.baseURL = BASE_URL;\n\nexport const fetchData = async path => {\n  try {\n    const response = await axios.get(`${BASE_URL}${path}`, {\n      headers: {\n        accept: 'application/json',\n      },\n    });\n\n    if (response.status === 200) {\n      return response.data;\n    } else {\n      throw new Error('Network response was not ok');\n    }\n  } catch (error) {\n    console.error('An error occurred while fetching data:', error);\n    throw error;\n  }\n};\n\nexport const getPost = async postId => {\n  const post = await fetchData(`${API_PATHS.post}/${postId}`);\n  return post;\n};\n\nexport const getBlogPosts = async (page, perPage = 6) => {\n  const apiUrl = `${API_PATHS.blog}&page=${page}&per_page=${perPage}`;\n  try {\n    const response = await axios.get(apiUrl, {\n      headers: {\n        accept: 'application/json',\n      },\n    });\n\n    if (response.status === 200) {\n      const totalPostsHeader = response.headers['x-wp-total'];\n      const posts = response.data;\n\n      const lastPage = Math.ceil(parseInt(totalPostsHeader) / perPage);\n\n      return { posts, lastPage };\n    } else {\n      throw new Error('Network response was not ok');\n    }\n  } catch (error) {\n    console.error('An error occurred while fetching blog posts:', error);\n    throw error;\n  }\n};\n\nexport const getPortfolioInterior = async () => {\n  const projects = await fetchData(API_PATHS.portfolioInterior);\n  return projects;\n};\n\nexport const getPortoflioBuildingsResidential = async () => {\n  const projects = await fetchData(API_PATHS.portoflioBuildingsResidential);\n  return projects;\n};\n\nexport const getPortoflioBuildingsIndustrial = async () => {\n  const projects = await fetchData(API_PATHS.portoflioBuildingsIndustrial);\n  return projects;\n};\n\nexport const getPortoflioBuildingsCommercial = async () => {\n  const projects = await fetchData(API_PATHS.portoflioBuildingsCommercial);\n  return projects;\n};\n\nexport const getAboutUsInfo = async () => {\n  const data = await fetchData(API_PATHS.aboutUs);\n  return data;\n};\n\nexport const fetchImages = async mediaId => {\n  try {\n    const response = await axios.get(`${API_PATHS.media}${mediaId}`);\n\n    if (response.status !== 200) {\n      throw new Error('Network response was not ok');\n    }\n\n    const images = response.data;\n    return images;\n  } catch (error) {\n    console.error('There was a problem fetching the media:', error);\n    throw error;\n  }\n};\n"],"names":["getImages","async","posts","imgState","setImgState","post","featured_media","mediaData","fetchImages","prevState","source_url","error","console","BlogPage","setPosts","useState","featuredImages","setFeaturedImages","currentPage","setCurrentPage","lastPageBlog","setLastPageBlog","dispatch","useDispatch","useEffect","fetchData","setIsLoading","lastPage","getBlogPosts","_jsxs","_Fragment","children","_jsx","Helmet","Section","Container","className","styles","map","Link","to","concat","id","Date","date","toLocaleDateString","year","month","day","title","rendered","dangerouslySetInnerHTML","__html","excerpt","src","alt","Button","onClick","goToPrevPage","prevPage","goToNextPage","BASE_URL","API_PATHS","axios","defaults","baseURL","response","get","path","headers","accept","status","data","Error","getPost","postId","page","perPage","arguments","length","undefined","apiUrl","totalPostsHeader","Math","ceil","parseInt","getPortfolioInterior","getPortoflioBuildingsResidential","getPortoflioBuildingsIndustrial","getPortoflioBuildingsCommercial","getAboutUsInfo","mediaId"],"sourceRoot":""}