{"version":3,"file":"static/js/99.ef8b5656.chunk.js","mappings":"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","sources":["webpack://2mstudio/./src/pages/PostDetails/PostDetails.module.scss?e73a","pages/PostDetails/PostDetails.jsx","config.js","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wp-post\":\"PostDetails_wp-post__WnIRd\"};","import { Helmet } from 'react-helmet';\nimport { Section, Container } from 'components';\nimport parse from 'html-react-parser';\nimport { useParams } from 'react-router-dom';\nimport { useQuery } from 'react-query';\n\nimport { getPost } from 'services/api';\nimport styles from './PostDetails.module.scss';\nimport { BackLink, AnimatedRoute, Loader } from 'components';\n\nconst PostDetails = () => {\n  const { postId } = useParams();\n\n  const {\n    data: post,\n    isLoading,\n    isError,\n  } = useQuery(`blogPost${postId}`, () => {\n    const postData = getPost(postId);\n    return postData;\n  });\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (isError) {\n    return <p>Wystąpił błąd, spróbuj odświeżyć stronę.</p>;\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>2M STUDIO Pracownia Projektowa</title>\n      </Helmet>\n\n      <Section>\n        <Container>\n          {post && (\n            <AnimatedRoute>\n              <div className={styles['wp-post']}>\n                <span>\n                  {new Date(post.date).toLocaleDateString('pl-PL', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                  })}\n                </span>\n                <h2>{post.title.rendered}</h2>\n                <hr />\n                <div>{parse(post.content.rendered)}</div>\n              </div>\n              <BackLink />\n            </AnimatedRoute>\n          )}\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default PostDetails;\n","// config.js\nexport const BASE_URL = 'https://www.2mstudio.org.pl/wordpress/wp-json/wp/v2/';\n\nexport const API_PATHS = {\n  post: 'posts',\n  blog: 'posts?categories=5',\n  portfolioInterior: 'posts?categories=16',\n  portoflioBuildingsResidential: 'posts?categories=17',\n  portoflioBuildingsIndustrial: 'posts?categories=18',\n  portoflioBuildingsCommercial: 'posts?categories=19',\n  media: 'media/',\n  aboutUs: 'pages/112',\n  offer: 'pages/342',\n};\n","import axios from 'axios';\nimport { BASE_URL, API_PATHS } from '../config.js';\n\nimport defaultImage from '../assets/images/photo-home.webp';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// fetch data\nexport const fetchData = async path => {\n  try {\n    const response = await instance.get(`${BASE_URL}${path}`, {\n      headers: {\n        accept: 'application/json',\n      },\n    });\n\n    if (response.status === 200) {\n      return response.data;\n    } else {\n      throw new Error('Network response was not ok');\n    }\n  } catch (error) {\n    console.error('An error occurred while fetching data:', error);\n    throw error;\n  }\n};\n\n// fetch projects with images\nexport const fetchProjectsWithImages = async path => {\n  const projects = await fetchData(path);\n\n  const projectsWithImages = await Promise.all(\n    projects.map(async project => {\n      let simplifiedProject = {\n        id: project.id,\n        img: defaultImage,\n        title: project.title.rendered,\n      };\n\n      if (project.featured_media) {\n        try {\n          const featuredMedia = await fetchImages(project.featured_media);\n          simplifiedProject.img = featuredMedia.source_url || defaultImage;\n        } catch (error) {\n          console.error(\n            'There was a problem fetching images for project:',\n            error\n          );\n        }\n      }\n\n      return simplifiedProject;\n    })\n  );\n\n  return projectsWithImages;\n};\n\n// fetch projects for different categories\nexport const getPortfolioInterior = async () => {\n  const projects = await fetchProjectsWithImages(API_PATHS.portfolioInterior);\n  return projects;\n};\n\nexport const getPortoflioBuildingsResidential = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsResidential\n  );\n  return projects;\n};\n\nexport const getPortoflioBuildingsIndustrial = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsIndustrial\n  );\n  return projects;\n};\n\nexport const getPortoflioBuildingsCommercial = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsCommercial\n  );\n  return projects;\n};\n\n// fetch blog posts\nexport const getBlogPosts = async (page, perPage = 6) => {\n  const apiUrl = `${API_PATHS.blog}&page=${page}&per_page=${perPage}`;\n\n  const response = await instance.get(apiUrl, {\n    headers: {\n      accept: 'application/json',\n    },\n  });\n\n  if (response.status === 200) {\n    const totalPostsHeader = response.headers['x-wp-total'];\n    const posts = response.data;\n    const lastPage = Math.ceil(parseInt(totalPostsHeader) / perPage);\n\n    const postsWithImages = await Promise.all(\n      posts.map(async post => {\n        let simplifiedPost = {\n          id: post.id,\n          img: defaultImage,\n          title: post.title.rendered,\n          date: post.date,\n          excerpt: post.excerpt.rendered,\n        };\n\n        if (post.featured_media) {\n          try {\n            const featuredMedia = await fetchImages(post.featured_media);\n            simplifiedPost.img = featuredMedia.source_url || defaultImage;\n          } catch (error) {\n            console.error(\n              'There was a problem fetching images for posts:',\n              error\n            );\n          }\n        }\n\n        return simplifiedPost;\n      })\n    );\n\n    return { posts: postsWithImages, lastPage };\n  } else {\n    throw new Error('Network response was not ok');\n  }\n};\n\nexport const getPost = async postId => {\n  const post = await fetchData(`${API_PATHS.post}/${postId}`);\n  return post;\n};\n\n// fetch data for a subpage - About Us\nexport const getAboutUsInfo = async () => {\n  const data = await fetchData(API_PATHS.aboutUs);\n  if (data && data.content && data.content.rendered) {\n    return data.content.rendered;\n  } else {\n    throw new Error('There was a problem fetching the data.');\n  }\n};\n\n// fetch data for a subpage - Offer\nexport const getOfferData = async () => {\n  const data = await fetchData(API_PATHS.offer);\n  if (data && data.content && data.content.rendered) {\n    return data.content.rendered;\n  } else {\n    throw new Error('There was a problem fetching the data.');\n  }\n};\n\n// fetch images for projects, blog posts\nexport const fetchImages = async mediaId => {\n  try {\n    const response = await instance.get(`${API_PATHS.media}${mediaId}`);\n\n    if (response.status !== 200) {\n      throw new Error('Network response was not ok');\n    }\n\n    const images = response.data;\n    return images;\n  } catch (error) {\n    console.error('There was a problem fetching the media:', error);\n    throw error;\n  }\n};\n"],"names":["PostDetails","postId","useParams","data","post","isLoading","isError","useQuery","concat","getPost","_jsx","Loader","children","_jsxs","_Fragment","Helmet","Section","Container","AnimatedRoute","className","styles","Date","date","toLocaleDateString","year","month","day","title","rendered","parse","content","BackLink","BASE_URL","API_PATHS","instance","axios","create","baseURL","headers","fetchData","async","response","get","path","accept","status","Error","error","console","fetchProjectsWithImages","projects","Promise","all","map","simplifiedProject","id","project","img","defaultImage","featured_media","featuredMedia","fetchImages","source_url","getPortfolioInterior","getPortoflioBuildingsResidential","getPortoflioBuildingsIndustrial","getPortoflioBuildingsCommercial","getBlogPosts","page","perPage","arguments","length","undefined","apiUrl","totalPostsHeader","posts","lastPage","Math","ceil","parseInt","simplifiedPost","excerpt","getAboutUsInfo","getOfferData","mediaId"],"sourceRoot":""}