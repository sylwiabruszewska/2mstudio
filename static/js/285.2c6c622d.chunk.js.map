{"version":3,"file":"static/js/285.2c6c622d.chunk.js","mappings":"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","sources":["webpack://2mstudio/./src/pages/BlogPage/BlogPage.module.scss?848f","pages/BlogPage/BlogPage.jsx","config.js","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"blog-list\":\"BlogPage_blog-list__FhnfV\",\"blog-post\":\"BlogPage_blog-post__4Rp8X\",\"blog-card\":\"BlogPage_blog-card__Yx2Dp\",\"box\":\"BlogPage_box__+pPxV\",\"post-img\":\"BlogPage_post-img__C6DEb\",\"blog-date\":\"BlogPage_blog-date__WTLjp\",\"blog-title\":\"BlogPage_blog-title__k+MSP\",\"blog-excerpt\":\"BlogPage_blog-excerpt__btwjq\",\"overlay\":\"BlogPage_overlay__QkxZR\",\"btn-group\":\"BlogPage_btn-group__0U9TC\",\"btn-pag\":\"BlogPage_btn-pag__4ry92\"};","import { Helmet } from 'react-helmet';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { useQuery } from 'react-query';\n\nimport styles from './BlogPage.module.scss';\nimport { Section, Container, Button, Loader } from 'components';\nimport { getBlogPosts } from '../../services/api';\n\nconst BlogPage = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const location = useLocation();\n\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const page = parseInt(queryParams.get('page') || '1');\n    setCurrentPage(page);\n  }, [location]);\n\n  const { data, isLoading, isError } = useQuery(\n    ['blogPosts', currentPage],\n    () => getBlogPosts(currentPage)\n  );\n\n  const posts = data?.posts;\n  const lastPage = data?.lastPage;\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (isError) {\n    return <p>Wystąpił błąd, spróbuj odświeżyć stronę.</p>;\n  }\n\n  const goToNextPage = () => {\n    const nextPage = currentPage + 1;\n    setCurrentPage(nextPage);\n    updateURL(nextPage);\n  };\n\n  const goToPrevPage = () => {\n    const prevPage = currentPage - 1;\n    setCurrentPage(prevPage);\n    updateURL(prevPage);\n  };\n\n  const updateURL = page => {\n    const queryParams = new URLSearchParams(location.search);\n    queryParams.set('page', page);\n    const newURL = `${process.env.PUBLIC_URL}${\n      location.pathname\n    }?${queryParams.toString()}`;\n    window.history.pushState({}, '', newURL);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>2M STUDIO Pracownia Projektowa - Portfolio - Blog</title>\n      </Helmet>\n\n      <Section>\n        <Container>\n          <div className={styles['blog-list']}>\n            {posts &&\n              posts.map(post => (\n                <article key={post.id} className={styles['blog-card']}>\n                  <div className={styles['blog-post']}>\n                    <Link to={`/${post.id}`}>\n                      <p className={styles['blog-date']}>\n                        {new Date(post.date).toLocaleDateString('pl-PL', {\n                          year: 'numeric',\n                          month: 'long',\n                          day: 'numeric',\n                        })}\n                      </p>\n                      <h2 className={styles['blog-title']}>{post.title}</h2>\n                      <p\n                        className=\"blog-excerpt\"\n                        dangerouslySetInnerHTML={{\n                          __html: post.excerpt,\n                        }}\n                      />\n                    </Link>\n                  </div>\n                  <div className={styles['overlay']}>\n                    <Link to={`/${post.id}`}>\n                      <div>\n                        <img\n                          src={post.img}\n                          alt={post.title}\n                          className={styles['post-img']}\n                        />\n\n                        <div className={styles['box']}>zobacz post</div>\n                      </div>\n                    </Link>\n                  </div>\n                </article>\n              ))}\n          </div>\n          <div className={styles['btn-group']}>\n            <div>\n              {posts && currentPage > 1 && (\n                <Button className={styles['btn-pag']} onClick={goToPrevPage}>\n                  Poprzednia strona\n                </Button>\n              )}\n            </div>\n            <div>\n              {currentPage < lastPage && posts && (\n                <Button className={styles['btn-pag']} onClick={goToNextPage}>\n                  Następna strona\n                </Button>\n              )}\n            </div>\n          </div>\n        </Container>\n      </Section>\n    </>\n  );\n};\n\nexport default BlogPage;\n","// config.js\nexport const BASE_URL = 'https://www.2mstudio.org.pl/wordpress/wp-json/wp/v2/';\n\nexport const API_PATHS = {\n  post: 'posts',\n  blog: 'posts?categories=5',\n  portfolioInterior: 'posts?categories=16',\n  portoflioBuildingsResidential: 'posts?categories=17',\n  portoflioBuildingsIndustrial: 'posts?categories=18',\n  portoflioBuildingsCommercial: 'posts?categories=19',\n  media: 'media/',\n  aboutUs: 'pages/112',\n};\n","import axios from 'axios';\nimport { BASE_URL, API_PATHS } from '../config.js';\n\nimport defaultImage from '../assets/images/photo-home.jpg';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// fetch data\nexport const fetchData = async path => {\n  try {\n    const response = await instance.get(`${BASE_URL}${path}`, {\n      headers: {\n        accept: 'application/json',\n      },\n    });\n\n    if (response.status === 200) {\n      return response.data;\n    } else {\n      throw new Error('Network response was not ok');\n    }\n  } catch (error) {\n    console.error('An error occurred while fetching data:', error);\n    throw error;\n  }\n};\n\n// fetch projects with images\nexport const fetchProjectsWithImages = async path => {\n  const projects = await fetchData(path);\n\n  const projectsWithImages = await Promise.all(\n    projects.map(async project => {\n      let simplifiedProject = {\n        id: project.id,\n        img: defaultImage,\n        title: project.title.rendered,\n      };\n\n      if (project.featured_media) {\n        try {\n          const featuredMedia = await fetchImages(project.featured_media);\n          simplifiedProject.img = featuredMedia.source_url || defaultImage;\n        } catch (error) {\n          console.error(\n            'There was a problem fetching images for project:',\n            error\n          );\n        }\n      }\n\n      return simplifiedProject;\n    })\n  );\n\n  return projectsWithImages;\n};\n\n// fetch projects for different categories\nexport const getPortfolioInterior = async () => {\n  const projects = await fetchProjectsWithImages(API_PATHS.portfolioInterior);\n  return projects;\n};\n\nexport const getPortoflioBuildingsResidential = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsResidential\n  );\n  return projects;\n};\n\nexport const getPortoflioBuildingsIndustrial = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsIndustrial\n  );\n  return projects;\n};\n\nexport const getPortoflioBuildingsCommercial = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsCommercial\n  );\n  return projects;\n};\n\n// fetch blog posts\nexport const getBlogPosts = async (page, perPage = 6) => {\n  const apiUrl = `${API_PATHS.blog}&page=${page}&per_page=${perPage}`;\n\n  const response = await instance.get(apiUrl, {\n    headers: {\n      accept: 'application/json',\n    },\n  });\n\n  if (response.status === 200) {\n    const totalPostsHeader = response.headers['x-wp-total'];\n    const posts = response.data;\n    const lastPage = Math.ceil(parseInt(totalPostsHeader) / perPage);\n\n    const postsWithImages = await Promise.all(\n      posts.map(async post => {\n        let simplifiedPost = {\n          id: post.id,\n          img: defaultImage,\n          title: post.title.rendered,\n          date: post.date,\n          excerpt: post.excerpt.rendered,\n        };\n\n        if (post.featured_media) {\n          try {\n            const featuredMedia = await fetchImages(post.featured_media);\n            simplifiedPost.img = featuredMedia.source_url || defaultImage;\n          } catch (error) {\n            console.error(\n              'There was a problem fetching images for posts:',\n              error\n            );\n          }\n        }\n\n        return simplifiedPost;\n      })\n    );\n\n    return { posts: postsWithImages, lastPage };\n  } else {\n    throw new Error('Network response was not ok');\n  }\n};\n\nexport const getPost = async postId => {\n  const post = await fetchData(`${API_PATHS.post}/${postId}`);\n  return post;\n};\n\n// fetch data for a subpage - About Us\nexport const getAboutUsInfo = async () => {\n  const data = await fetchData(API_PATHS.aboutUs);\n  if (data && data.content && data.content.rendered) {\n    return data.content.rendered;\n  } else {\n    throw new Error('Nie można pobrać zawartości strony O nas.');\n  }\n};\n\n// fetch images for projects, blog posts\nexport const fetchImages = async mediaId => {\n  try {\n    const response = await instance.get(`${API_PATHS.media}${mediaId}`);\n\n    if (response.status !== 200) {\n      throw new Error('Network response was not ok');\n    }\n\n    const images = response.data;\n    return images;\n  } catch (error) {\n    console.error('There was a problem fetching the media:', error);\n    throw error;\n  }\n};\n"],"names":["BlogPage","currentPage","setCurrentPage","useState","location","useLocation","useEffect","queryParams","URLSearchParams","search","page","parseInt","get","data","isLoading","isError","useQuery","getBlogPosts","posts","lastPage","_jsx","Loader","children","updateURL","set","newURL","concat","process","pathname","toString","window","history","pushState","_jsxs","_Fragment","Helmet","Section","Container","className","styles","map","post","Link","to","id","Date","date","toLocaleDateString","year","month","day","title","dangerouslySetInnerHTML","__html","excerpt","src","img","alt","Button","onClick","goToPrevPage","prevPage","goToNextPage","nextPage","BASE_URL","API_PATHS","instance","axios","create","baseURL","headers","fetchData","async","response","path","accept","status","Error","error","console","fetchProjectsWithImages","projects","Promise","all","simplifiedProject","project","defaultImage","rendered","featured_media","featuredMedia","fetchImages","source_url","getPortfolioInterior","getPortoflioBuildingsResidential","getPortoflioBuildingsIndustrial","getPortoflioBuildingsCommercial","perPage","arguments","length","undefined","apiUrl","totalPostsHeader","Math","ceil","simplifiedPost","getPost","postId","getAboutUsInfo","content","mediaId"],"sourceRoot":""}