{"version":3,"file":"static/js/830.62e9fad4.chunk.js","mappings":"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","sources":["pages/ProjectsPages/AllProjects.jsx","config.js","services/api.js"],"sourcesContent":["import { ProjectsPageTemplate } from 'components';\nimport {\n  getPortfolioInterior,\n  getPortoflioBuildingsCommercial,\n  getPortoflioBuildingsIndustrial,\n  getPortoflioBuildingsResidential,\n} from '../../services/api';\n\nconst AllProjects = () => {\n  return (\n    <ProjectsPageTemplate\n      pageTitle=\"Wszystkie projekty\"\n      apiFunction={async () => {\n        const [\n          InteriorProjects,\n          commercialProjects,\n          residentialProjects,\n          industrialProjects,\n        ] = await Promise.all([\n          getPortfolioInterior(),\n          getPortoflioBuildingsCommercial(),\n          getPortoflioBuildingsResidential(),\n          getPortoflioBuildingsIndustrial(),\n        ]);\n\n        const allProjects = [\n          ...InteriorProjects,\n          ...commercialProjects,\n          ...residentialProjects,\n          ...industrialProjects,\n        ];\n\n        return allProjects;\n      }}\n    />\n  );\n};\n\nexport default AllProjects;\n","// config.js\nexport const BASE_URL = 'https://www.2mstudio.org.pl/wordpress/wp-json/wp/v2/';\n\nexport const API_PATHS = {\n  post: 'posts',\n  blog: 'posts?categories=5',\n  portfolioInterior: 'posts?categories=16',\n  portoflioBuildingsResidential: 'posts?categories=17',\n  portoflioBuildingsIndustrial: 'posts?categories=18',\n  portoflioBuildingsCommercial: 'posts?categories=19',\n  media: 'media/',\n  aboutUs: 'pages/112',\n};\n","import axios from 'axios';\nimport { BASE_URL, API_PATHS } from '../config.js';\n\nimport defaultImage from '../assets/images/photo-home.jpg';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// fetch data\nexport const fetchData = async path => {\n  try {\n    const response = await instance.get(`${BASE_URL}${path}`, {\n      headers: {\n        accept: 'application/json',\n      },\n    });\n\n    if (response.status === 200) {\n      return response.data;\n    } else {\n      throw new Error('Network response was not ok');\n    }\n  } catch (error) {\n    console.error('An error occurred while fetching data:', error);\n    throw error;\n  }\n};\n\n// fetch projects with images\nexport const fetchProjectsWithImages = async path => {\n  const projects = await fetchData(path);\n\n  const projectsWithImages = await Promise.all(\n    projects.map(async project => {\n      let simplifiedProject = {\n        id: project.id,\n        img: defaultImage,\n        title: project.title.rendered,\n      };\n\n      if (project.featured_media) {\n        try {\n          const featuredMedia = await fetchImages(project.featured_media);\n          simplifiedProject.img = featuredMedia.source_url || defaultImage;\n        } catch (error) {\n          console.error(\n            'There was a problem fetching images for project:',\n            error\n          );\n        }\n      }\n\n      return simplifiedProject;\n    })\n  );\n\n  return projectsWithImages;\n};\n\n// fetch projects for different categories\nexport const getPortfolioInterior = async () => {\n  const projects = await fetchProjectsWithImages(API_PATHS.portfolioInterior);\n  return projects;\n};\n\nexport const getPortoflioBuildingsResidential = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsResidential\n  );\n  return projects;\n};\n\nexport const getPortoflioBuildingsIndustrial = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsIndustrial\n  );\n  return projects;\n};\n\nexport const getPortoflioBuildingsCommercial = async () => {\n  const projects = await fetchProjectsWithImages(\n    API_PATHS.portoflioBuildingsCommercial\n  );\n  return projects;\n};\n\n// fetch blog posts\nexport const getBlogPosts = async (page, perPage = 6) => {\n  const apiUrl = `${API_PATHS.blog}&page=${page}&per_page=${perPage}`;\n\n  const response = await instance.get(apiUrl, {\n    headers: {\n      accept: 'application/json',\n    },\n  });\n\n  if (response.status === 200) {\n    const totalPostsHeader = response.headers['x-wp-total'];\n    const posts = response.data;\n    const lastPage = Math.ceil(parseInt(totalPostsHeader) / perPage);\n\n    const postsWithImages = await Promise.all(\n      posts.map(async post => {\n        let simplifiedPost = {\n          id: post.id,\n          img: defaultImage,\n          title: post.title.rendered,\n          date: post.date,\n          excerpt: post.excerpt.rendered,\n        };\n\n        if (post.featured_media) {\n          try {\n            const featuredMedia = await fetchImages(post.featured_media);\n            simplifiedPost.img = featuredMedia.source_url || defaultImage;\n          } catch (error) {\n            console.error(\n              'There was a problem fetching images for posts:',\n              error\n            );\n          }\n        }\n\n        return simplifiedPost;\n      })\n    );\n\n    return { posts: postsWithImages, lastPage };\n  } else {\n    throw new Error('Network response was not ok');\n  }\n};\n\nexport const getPost = async postId => {\n  const post = await fetchData(`${API_PATHS.post}/${postId}`);\n  return post;\n};\n\n// fetch data for a subpage - About Us\nexport const getAboutUsInfo = async () => {\n  const data = await fetchData(API_PATHS.aboutUs);\n  if (data && data.content && data.content.rendered) {\n    return data.content.rendered;\n  } else {\n    throw new Error('Nie można pobrać zawartości strony O nas.');\n  }\n};\n\n// fetch images for projects, blog posts\nexport const fetchImages = async mediaId => {\n  try {\n    const response = await instance.get(`${API_PATHS.media}${mediaId}`);\n\n    if (response.status !== 200) {\n      throw new Error('Network response was not ok');\n    }\n\n    const images = response.data;\n    return images;\n  } catch (error) {\n    console.error('There was a problem fetching the media:', error);\n    throw error;\n  }\n};\n"],"names":["AllProjects","_jsx","ProjectsPageTemplate","pageTitle","apiFunction","async","InteriorProjects","commercialProjects","residentialProjects","industrialProjects","Promise","all","getPortfolioInterior","getPortoflioBuildingsCommercial","getPortoflioBuildingsResidential","getPortoflioBuildingsIndustrial","BASE_URL","API_PATHS","instance","axios","create","baseURL","headers","fetchData","response","get","concat","path","accept","status","data","Error","error","console","fetchProjectsWithImages","projects","map","simplifiedProject","id","project","img","defaultImage","title","rendered","featured_media","featuredMedia","fetchImages","source_url","getBlogPosts","page","perPage","arguments","length","undefined","apiUrl","totalPostsHeader","posts","lastPage","Math","ceil","parseInt","simplifiedPost","post","date","excerpt","getPost","postId","getAboutUsInfo","content","mediaId"],"sourceRoot":""}